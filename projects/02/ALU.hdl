// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Perform the zero or negation for X 
    Mux16(a= x, b= false, sel= zx, out= xNeg);
    Not16(in= xNeg, out= xNegOrNot);
    Mux16(a= xNeg, b= xNegOrNot, sel= nx, out= xProcessed);

    // Perform the zero or negation for Y
    Mux16(a= y, b= false, sel= zy, out= yNeg);
    Not16(in= yNeg, out= yNegOrNot);
    Mux16(a= yNeg, b= yNegOrNot, sel= ny, out= yProcessed);
    // Add X with Y, AND X with Y
    Add16(a= xProcessed, b= yProcessed, out= xyAdded);
    And16(a= xProcessed, b= yProcessed, out= xyAnded);
    // Select the required function
    Mux16(a= xyAnded, b= xyAdded, sel= f, out= functionOut);
    // Final check for negation of output
    Not16(in=functionOut, out= negFunctionOut);
    Mux16(a= functionOut, b= negFunctionOut, sel= no, out= out, out= anyBitCheck, out[15]=ng);
    // Check for zero
    Or16Way(in= anyBitCheck, out= anybit);
    // if anybit is 1, there is a bit, hence the output is not zero
    Not(in=anybit, out=zr);
    // if the first bit of the output is 1 then the output is negative
}