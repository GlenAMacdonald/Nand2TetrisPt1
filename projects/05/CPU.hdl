// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    ALU(x=, y=, zx=, nx=, zy=, ny=, f=, no=, out=, zr=CalcIs0, ng=CalcIsLt0);
    
    // Jump Circuitry
    // Component 1 - Decode Jump Instruction to Cases, note that the last output is a non-conditional
        // if the instruction is a Control instruction, allow for jumps, otherwise disallow jumps.
        // instruction[16] is 1 if its a control instruction, otherwise it's an arithmetic instruction and there are no jumps.
    DMux8Way(in=instruction[16], sel=instruction[0..2], a=noJump, b=JumpIfGt0, c=JumpIf0, d=JumpIfGe0, e=JumpIfLt0, f=JumpIfNe0, g=JumpIfLe0, h=Jump);
    // Component Bunch 2 - ALU Calculation cases
    Not (in=CalcIs0,               out=CalcIsNot0);
    Not (in=CalcIsLt0,             out=CalcIsGt0);
    Or  (a=CalcIs0,   b=CalcIsGt0, out=CalcIsGe0);
    Or  (a=CalcIsLt0, b=CalcIs0,   out=CalcIsLe0);
        // Jump cases, see figure 4.5
        And(a=JumpIfGt0, b=CalcIsGt0, out=Jump);
        And(a=JumpIf0,   b=CalcIs0,   out=Jump);
        And(a=JumpIfGe0, b=CalcIsGe0, out=Jump);
        And(a=JumpIfLt0, b=CalcIsLt0, out=Jump);
        And(a=JumpIfNe0, b=CalcIsNe0, out=Jump);
        And(a=JumpIfLe0, b=CalcIsLe0, out=Jump);

    // Program Counter Circuitry
    PC(in=, load=Jump, inc=, reset=reset, out[0..14]=pc);

}